#!/usr/bin/env node

'use strict'

const fs = require('fs')
const svg2ttf = require('svg2ttf')
const ttf2woff = require('ttf2woff')

const Size = 1000
const StateCodes = 'AK AL AR AZ CA CO CT DC DE FL GA HI IA ID IL IN KS KY LA MA MD ME MI MN MO MS MT NC ND NE NH NJ NM NV NY OH OK OR PA RI SC SD TN TX UT VA VT WA WI WV WY'.split(/ /)

function statePathD(stateCode) {
  const svg = fs.readFileSync(`${__dirname}/output/tiny/${stateCode}.svg`, 'utf-8')
  const viewBoxM = /viewBox="0 0 (\d+) (\d+)"/.exec(svg)
  if (!viewBoxM) throw new Error(`Could not find viewBox in SVG: ${svg}`)
  const pathDM = /d="([^"]+)"/.exec(svg)
  if (!pathDM) throw new Error(`Could not find path d in SVG: ${svg}`)

  const width = +viewBoxM[1]
  const height = +viewBoxM[2]

  const x0 = (Size - width) >> 1
  const y0 = (Size - height) >> 1

  // We'll use regexes to do two things:
  // 1. Re-center by moving what we "M" to
  // 2. Flip vertically, because SVG fonts are flipped and we want svg2ttf to
  //    understand us very clearly
  const d = pathDM[1]
    .replace(/M(-?\d+),(-?\d+)/g, (_, x, y) => `M${+x + x0},${Size - (+y + y0)}`)
    .replace(/l(-?\d+),(-?\d+)/g, (_, x, y) => `l${x},${0 - +y}`)
    .replace(/v(-?\d+)/g, (_, y) => `v${0 - +y}`)

  console.log(pathDM[1], '     ', d)

  return d
}

function stateGlyph(stateCode, i) {
  return `<glyph glyph-name="${stateCode}" unicode="&#xe${(0x1001 + i).toString(16).slice(1)};" d="${statePathD(stateCode)}"/>`
}

const svg = [
  '<?xml version="1.0" standalone="yes"?>',
  `<svg xmlns="http://www.w3.org/2000/svg" width="${Size}" height="${Size}" version="1.1">`,
    '<defs>',
      `<font id="States" horiz-adv-x="${Size}">`,
        `<font-face font-family="States" units-per-em="${Size}"/>`,
        `<missing-glyph horiz-adv-x="${Size}"/>`,
        StateCodes.map((code, i) => stateGlyph(code, i)).join(''),
      '</font>',
    '</defs>',
  '</svg>'
].join('')

const ttf = svg2ttf(svg, { copyright: 'public domain' })
const woff = ttf2woff(ttf)

fs.writeFileSync(`${__dirname}/../../assets/fonts/States.woff`, Buffer.from(woff.buffer))

const scss = [
  '// DO NOT EDIT THIS FILE. Edit raw-assets/state-map-builder/render-state-font.js instead.',
  `@font-face { font-family: 'States'; src: asset-url('digest', 'fonts/States.woff') format('woff'); }`,
  'span.state[data-state-id] { width: 1em; height: 1em; font-family: States; }',
  StateCodes.map((code, i) => `span.state[data-state-id=${code}]::before { content: '${String.fromCodePoint(0xe001 + i)}'; }`).join('\n')
].join('\n\n')
fs.writeFileSync(`${__dirname}/../../assets/stylesheets/_font-states.scss`, scss)
